//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class LoginScenarioTests : VsTestClassBase {
        
        public LoginScenarioTests() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void LoginSuccessfulDelegate1(string obj_p1);
        
        public delegate void UnknownUserDelegate1(string obj_p1);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo LoginSuccessfulInfo = TestManagerHelpers.GetEventInfo(typeof(TestAdapter.SystemUnderTest), "LoginSuccessful");
        
        static System.Reflection.EventInfo UnknownUserInfo = TestManagerHelpers.GetEventInfo(typeof(TestAdapter.SystemUnderTest), "UnknownUser");
        #endregion
        
        #region Test Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize() {
            this.InitializeTestManager();
            this.Manager.Subscribe(LoginSuccessfulInfo, null);
            this.Manager.Subscribe(UnknownUserInfo, null);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestCleanup() {
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LoginScenarioTestsS0() {
            this.Manager.BeginTest("LoginScenarioTestsS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call Login(\"admin\",\"geheim\")\'");
            TestAdapter.SystemUnderTest.Login("admin", "geheim");
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return Login\'");
            this.Manager.Comment("reaching state \'S10\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS0LoginSuccessfulChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call Logout(\"admin\")\'");
                TestAdapter.SystemUnderTest.Logout("admin");
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return Logout\'");
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("executing step \'call Login(\"admin\",\"geheim\")\'");
                TestAdapter.SystemUnderTest.Login("admin", "geheim");
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("checking step \'return Login\'");
                this.Manager.Comment("reaching state \'S31\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS0LoginSuccessfulChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S34\'");
                    this.Manager.Comment("executing step \'call Logout(\"admin\")\'");
                    TestAdapter.SystemUnderTest.Logout("admin");
                    this.Manager.Comment("reaching state \'S37\'");
                    this.Manager.Comment("checking step \'return Logout\'");
                    this.Manager.Comment("reaching state \'S39\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS0LoginSuccessfulChecker1)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS0LoginSuccessfulChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void LoginScenarioTestsS0LoginSuccessfulChecker(string obj_p1) {
            this.Manager.Comment("checking step \'event LoginSuccessful(\"admin\")\'");
            TestManagerHelpers.AssertAreEqual<string>(this.Manager, "admin", obj_p1, "obj_p1 of LoginSuccessful, state S10");
        }
        
        private void LoginScenarioTestsS0LoginSuccessfulChecker1(string obj_p1) {
            this.Manager.Comment("checking step \'event LoginSuccessful(\"admin\")\'");
            TestManagerHelpers.AssertAreEqual<string>(this.Manager, "admin", obj_p1, "obj_p1 of LoginSuccessful, state S31");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LoginScenarioTestsS2() {
            this.Manager.BeginTest("LoginScenarioTestsS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call Login(\"admin\",\"geheim\")\'");
            TestAdapter.SystemUnderTest.Login("admin", "geheim");
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return Login\'");
            this.Manager.Comment("reaching state \'S11\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS2LoginSuccessfulChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call Logout(\"admin\")\'");
                TestAdapter.SystemUnderTest.Logout("admin");
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("checking step \'return Logout\'");
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("executing step \'call Login(\"manuel\",\"geheim\")\'");
                TestAdapter.SystemUnderTest.Login("manuel", "geheim");
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return Login\'");
                this.Manager.Comment("reaching state \'S32\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(LoginScenarioTests.UnknownUserInfo, null, new UnknownUserDelegate1(this.LoginScenarioTestsS2UnknownUserChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S35\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(LoginScenarioTests.UnknownUserInfo, null, new UnknownUserDelegate1(this.LoginScenarioTestsS2UnknownUserChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS2LoginSuccessfulChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void LoginScenarioTestsS2LoginSuccessfulChecker(string obj_p1) {
            this.Manager.Comment("checking step \'event LoginSuccessful(\"admin\")\'");
            TestManagerHelpers.AssertAreEqual<string>(this.Manager, "admin", obj_p1, "obj_p1 of LoginSuccessful, state S11");
        }
        
        private void LoginScenarioTestsS2UnknownUserChecker(string obj_p1) {
            this.Manager.Comment("checking step \'event UnknownUser(\"manuel\")\'");
            TestManagerHelpers.AssertAreEqual<string>(this.Manager, "manuel", obj_p1, "obj_p1 of UnknownUser, state S32");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LoginScenarioTestsS4() {
            this.Manager.BeginTest("LoginScenarioTestsS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call Login(\"admin\",\"geheim\")\'");
            TestAdapter.SystemUnderTest.Login("admin", "geheim");
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return Login\'");
            this.Manager.Comment("reaching state \'S12\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS4LoginSuccessfulChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("executing step \'call Logout(\"admin\")\'");
                TestAdapter.SystemUnderTest.Logout("admin");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return Logout\'");
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call Login(\"guest\",\"geheim\")\'");
                TestAdapter.SystemUnderTest.Login("guest", "geheim");
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("checking step \'return Login\'");
                this.Manager.Comment("reaching state \'S33\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS4LoginSuccessfulChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S36\'");
                    this.Manager.Comment("executing step \'call Logout(\"guest\")\'");
                    TestAdapter.SystemUnderTest.Logout("guest");
                    this.Manager.Comment("reaching state \'S38\'");
                    this.Manager.Comment("checking step \'return Logout\'");
                    this.Manager.Comment("reaching state \'S40\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS4LoginSuccessfulChecker1)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS4LoginSuccessfulChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void LoginScenarioTestsS4LoginSuccessfulChecker(string obj_p1) {
            this.Manager.Comment("checking step \'event LoginSuccessful(\"admin\")\'");
            TestManagerHelpers.AssertAreEqual<string>(this.Manager, "admin", obj_p1, "obj_p1 of LoginSuccessful, state S12");
        }
        
        private void LoginScenarioTestsS4LoginSuccessfulChecker1(string obj_p1) {
            this.Manager.Comment("checking step \'event LoginSuccessful(\"guest\")\'");
            TestManagerHelpers.AssertAreEqual<string>(this.Manager, "guest", obj_p1, "obj_p1 of LoginSuccessful, state S33");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LoginScenarioTestsS6() {
            this.Manager.BeginTest("LoginScenarioTestsS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call Login(\"manuel\",\"geheim\")\'");
            TestAdapter.SystemUnderTest.Login("manuel", "geheim");
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return Login\'");
            this.Manager.Comment("reaching state \'S13\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(LoginScenarioTests.UnknownUserInfo, null, new UnknownUserDelegate1(this.LoginScenarioTestsS6UnknownUserChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S18\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(LoginScenarioTests.UnknownUserInfo, null, new UnknownUserDelegate1(this.LoginScenarioTestsS6UnknownUserChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void LoginScenarioTestsS6UnknownUserChecker(string obj_p1) {
            this.Manager.Comment("checking step \'event UnknownUser(\"manuel\")\'");
            TestManagerHelpers.AssertAreEqual<string>(this.Manager, "manuel", obj_p1, "obj_p1 of UnknownUser, state S13");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LoginScenarioTestsS8() {
            this.Manager.BeginTest("LoginScenarioTestsS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call Login(\"guest\",\"geheim\")\'");
            TestAdapter.SystemUnderTest.Login("guest", "geheim");
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return Login\'");
            this.Manager.Comment("reaching state \'S14\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS8LoginSuccessfulChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("executing step \'call Logout(\"guest\")\'");
                TestAdapter.SystemUnderTest.Logout("guest");
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return Logout\'");
                this.Manager.Comment("reaching state \'S27\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(LoginScenarioTests.LoginSuccessfulInfo, null, new LoginSuccessfulDelegate1(this.LoginScenarioTestsS8LoginSuccessfulChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void LoginScenarioTestsS8LoginSuccessfulChecker(string obj_p1) {
            this.Manager.Comment("checking step \'event LoginSuccessful(\"guest\")\'");
            TestManagerHelpers.AssertAreEqual<string>(this.Manager, "guest", obj_p1, "obj_p1 of LoginSuccessful, state S14");
        }
        #endregion
    }
}
